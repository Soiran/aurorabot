import { Keyboard } from 'vk-io';

import { bot } from '../..';
import User from '../../controllers/user.controller';
import Frame from '../../models/frame';
import Scene from '../../models/scene';
import { ProfileView, Response } from '../../typings/global';
import messageValidator from '../../validators/search/message';
import SearchMainScene from './main';


export default function ReportScene(payload?) {
    return new Scene('Report', payload).add(new Frame(
        async scene => {
            if (scene.user.canReport) {
                bot.sendMessage({
                    peer_id: scene.user.id,
                    message: '–ù–∞–ø–∏—à–∏ –∂–∞–ª–æ–±—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è ‚úçüèª\n1. –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è\n2. –†–µ–∫–ª–∞–º–∞\n3. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ\n4. –ü—Ä–∏–∑—ã–≤ –∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º',
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: '1',
                        payload: { item: true, porn: true },
                        color: Keyboard.PRIMARY_COLOR
                    })
                    .textButton({
                        label: '2',
                        payload: { item: true, ad: true },
                        color: Keyboard.PRIMARY_COLOR
                    })
                    .textButton({
                        label: '3',
                        payload: { item: true, scam: true },
                        color: Keyboard.PRIMARY_COLOR
                    })
                    .textButton({
                        label: '4',
                        payload: { item: true, call: true },
                        color: Keyboard.PRIMARY_COLOR
                    }).row()
                    .textButton({
                        label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫',
                        payload: { back: true },
                        color: Keyboard.SECONDARY_COLOR
                    })
                });
            } else {
                bot.sendMessage({
                    peer_id: scene.user.id,
                    message: '–ó–∞ —ç—Ç–∏ 24 —á–∞—Å–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–∞–ª–æ–±, –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–º ü§ùüèª',
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫',
                        payload: { back: true },
                        color: Keyboard.SECONDARY_COLOR
                    })
                });
            }
            
        },
        async (message, scene) => {
            let payload = message.messagePayload;
            let reportText: string;
            if (payload?.back) {
                scene.user.setScene(SearchMainScene());
                return;
            }
            if (payload?.item) {
                if (payload?.porn) {
                    reportText = '–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è';
                } else if (payload?.ad) {
                    reportText = '–†–µ–∫–ª–∞–º–∞';
                } else if (payload?.scam) {
                    reportText = '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ';
                } else if (payload?.call) {
                    reportText = '–ü—Ä–∏–∑—ã–≤ –∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º';
                }
            } else {
                reportText = message.text;
                let response = messageValidator(reportText);
                if (response === Response.NO_VALUE) {
                    scene.retry();
                    return;
                } else if (response === Response.OUT_OF_RANGE) {
                    scene.retry({
                        phrase: '–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö –∏ –±–æ–ª—å—à–µ 256 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É.'
                    });
                    return;
                }
            }
            let found: User = scene.payload.found;
            found.notify({
                controller: scene.user,
                type: ProfileView.REPORT,
                message: reportText
            });
            scene.user.setScene(SearchMainScene(await scene.user.profile.data()));
        }
    ));
}