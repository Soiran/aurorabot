import { Keyboard } from 'vk-io';

import { bot, users } from '..';
import GeoController from '../controllers/geo.controller';
import User from '../controllers/user.controller';
import Frame from '../models/frame';
import Scene from '../models/scene';
import { Response } from '../typings/global';
import geoValidator from '../validators/profile/geo';
import ProfileMainScene from './profile/main';


/**
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π.
 */
export const TempScene = (payload?) => {
    return new Scene('TempScene', payload).add(new Frame(
        async scene => {
            let response = await bot.api.users.get({
                user_id: scene.user.id
            });
            let firstName = scene.payload?.name || response[0].first_name;
            bot.sendMessage({
                peer_id: scene.user.id,
                message: `–ü—Ä–∏–≤–µ—Ç, ${firstName}, –≤—ã—à–ª–æ –Ω–µ–±–æ–ª—å—à–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç —Ç—Ä—É–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤?`,
                keyboard: Keyboard.builder().textButton({
                    label: 'üëç',
                    color: Keyboard.POSITIVE_COLOR
                })
            })
        },
        async (message, scene) => {
            scene.next();
        }
    ))
    .add(new Frame(
        async (scene, options) => {
            bot.sendMessage({
                message: options?.phrase || '–°–æ—Å—Ç–æ–∏—à—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö/–±—Ä–∞–∫–µ?',
                peer_id: scene.user.id,
                keyboard: Keyboard.builder().textButton({
                    label: '–î–∞',
                    payload: { relationships: 1 },
                    color: Keyboard.PRIMARY_COLOR
                }).textButton({
                    label: '–ù–µ—Ç',
                    payload: { relationships: 0 },
                    color: Keyboard.PRIMARY_COLOR
                })
            });
        },
        (message, scene) => {
            let relationships = message.messagePayload?.relationships;
            let profileController = new User(scene.user.id).profile;
            if (relationships === undefined) {
                scene.retry({
                    phrase: '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç", —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª–∞ –æ —Ç–≤–æ–µ–º —Å–µ–º–µ–π–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.'
                });
                return;
            }
            profileController.edit({ relationships: relationships });
            scene.next();
        }
    ))
    .add(new Frame(
        async (scene, options) => {
            let geoKeyboard = Keyboard.builder().locationRequestButton({}).oneTime();
            bot.sendMessage({
                message: options?.phrase || '–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.',
                peer_id: scene.user.id,
                keyboard: scene.payload?.city ? geoKeyboard.textButton({
                    label: scene.payload?.city,
                    color: Keyboard.SECONDARY_COLOR
                }) : geoKeyboard
            });
        },
        async (message, scene) => {
            let cityName = message.text;
            let geo = message.geo;
            let city = cityName ? await GeoController.search(cityName) : null;
            let response = await geoValidator(geo, city);
            let profileController = new User(scene.user.id).profile;
            
            if (response === Response.UNKNOWN_LOCATION) {
                scene.retry({
                    phrase: '–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
                });
            } else if (response === Response.UNKNOWN_CITY) {
                scene.retry({
                    phrase: '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
                });
            } else if (response === Response.VALID_LOCATION ) {
                city = await GeoController.search(geo.place.city);
                profileController.edit({
                    latitude: geo.coordinates.latitude,
                    longitude: geo.coordinates.longitude,
                    city_latitude: city.latitude,
                    city_longitude: city.longitude
                });
                users.get(scene.user.id.toString()).setScene(ProfileMainScene());
            } else if (response === Response.VALID_CITY) {
                profileController.edit({
                    latitude: null,
                    longitude: null,
                    city_latitude: city.latitude,
                    city_longitude: city.longitude
                });
                users.get(scene.user.id.toString()).setScene(ProfileMainScene());
            }
        }
    ));
}